program = ["$"]
declaration_list = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "for", "return", "+", "-", "$"]
declaration = ["ID", ";", "NUM", "(", "int", "void", "{", "}", "break", "if", "for", "return", "+", "-", "$"]
declaration_initial = [";", "[", "(", ")", ","]
declaration_prime = ["ID", ";", "NUM", "(", "int", "void", "{", "}", "break", "if", "for", "return", "+", "-", "$"]
var_declaration_prime = ["ID", ";", "NUM", "(", "int", "void", "{", "}", "break", "if", "for", "return", "+", "-",
                         "$"]
fun_declaration_prime = ["ID", ";", "NUM", "(", "int", "void", "{", "}", "break", "if", "for", "return", "+", "-",
                         "$"]
type_specifier = ["ID"]
params = [")"]
param_list = [")"]
param = [")", ","]
param_prime = [")", ","]
compound_stmt = ["ID", ";", "NUM", "(", "int", "void", "{", "}", "break", "if", "endif", "else", "for", "return", "+",
                 "-", "$"]
statement_list = ["}"]
statement = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
expression_stmt = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
selection_stmt = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
else_stmt = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
iteration_stmt = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
return_stmt = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
return_stmt_prime = ["ID", ";", "NUM", "(", "{", "}", "break", "if", "endif", "else", "for", "return", "+", "-"]
expression = [";", "]", ")", ","]
b = [";", "]", ")", ","]
h = [";", "]", ")", ","]
simple_expression_zegond = [";", "]", ")", ","]
simple_expression_prime = [";", "]", ")", ","]
c = [";", "]", ")", ","]
relop = ["ID", "NUM", "(", "+", "-"]
additive_expression = [";", "]", ")", ","]
additive_expression_prime = [";", "]", ")", ",", "<", "=="]
additive_expression_zegond = [";", "]", ")", ",", "<", "=="]
d = [";", "]", ")", ",", "<", "=="]
addop = ["ID", "NUM", "(", "+", "-"]
term = [";", "]", ")", ",", "<", "==", "+", "-"]
term_prime = [";", "]", ")", ",", "<", "==", "+", "-"]
term_zegond = [";", "]", ")", ",", "<", "==", "+", "-"]
g = [";", "]", ")", ",", "<", "==", "+", "-"]
signed_factor = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
signed_factor_prime = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
signed_factor_zegond = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
factor = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
var_call_prime = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
var_prime = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
factor_prime = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
factor_zegond = [";", "]", ")", ",", "<", "==", "+", "-", "*"]
args = [")"]
arg_list = [")"]
arg_list_prime = [")"]
